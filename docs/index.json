[
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/",
	"title": "Introduction to Kubernetes",
	"tags": [],
	"description": "",
	"content": " Introduction to Kubernetes Introduction to Kubernetes is a presentation giving attendees a thorough understanding of the fundamentals of Kubernetes.\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Instructors Contino Agenda  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/",
	"title": "Containers",
	"tags": [],
	"description": "",
	"content": " History\n Primitives\n Docker\n  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": " History Community  CNCF Graduated Projects CNCF Incubating Projects\n Get Involved  Connect to Cluster Kubernetes Objects  Namespaces Pods Resource Quotas Controllers Storage Secrets ConfigMaps Ingress Service Healthchecks  Microservice Exercise Options for Running Kubernetes Extras  Logging Monitoring Security   "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/closing/",
	"title": "Closing",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Closing remarks Contact Me:\n@strongjz\nEmail: james.strong@contino.io\ncontino.io\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/history/",
	"title": "History",
	"tags": [],
	"description": "",
	"content": " Kubernetes History Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.\n Kubernetes is heavily influenced by Google’s Borg system Released in 2015 when Google partnered with Linux foundation to form CNCF Often called K8s which is a Numeronym K[ubernete]s → K[8]s → K8s Kubernetes - Greek for helmsman or pilot  “Kubernetes was built to radically change the way that applications are built and deployed in the cloud. Fundamentally, it was designed to give developers more velocity, efficiency, and agility”\nKelsey Hightower, Brendan Burns \u0026amp; Joe Beda -Kubernetes Up and Running Book\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/introduction/whoami/",
	"title": "Instructors",
	"tags": [],
	"description": "",
	"content": "James Strong\nTechnical Principal @ Contino\nCertified Kubernetes Admin\n@strongjz\nhttps://jamesstrong.dev\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/introduction/contino/",
	"title": "Contino",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/introduction/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Introduction  Presenter Contino Agenda  Containers  Intro History Primitives Docker Network Storage  Kubernetes  History Community  CNCF Graduated Projects CNCF Incubating Projects\n Get Involved  Connect to Cluster Kubernetes Objects  Namespaces Pods Resource Quotas Controllers Storage Secrets ConfigMaps Ingress Service Healthchecks  Options for Running Kubernetes Extras  Monitoring Security    "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/history/",
	"title": "History",
	"tags": [],
	"description": "",
	"content": " Container History 1. In the beginning 2. Hypervisors 3. Containers "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/history/history/",
	"title": "Beginning",
	"tags": [],
	"description": "",
	"content": " In the beginning "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/history/hyper/",
	"title": "Hypervisor",
	"tags": [],
	"description": "",
	"content": " The Hypervisor "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/history/containers/",
	"title": "Containers",
	"tags": [],
	"description": "",
	"content": " Containers "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/history/layers/",
	"title": "Layers",
	"tags": [],
	"description": "",
	"content": " Container Layers "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": " CNCF Landscape "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/community/projects_grad/",
	"title": "Graduated Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/community/projects_inc/",
	"title": "Incubating Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/community/involvement/",
	"title": "Involvement",
	"tags": [],
	"description": "",
	"content": " Sigs https://github.com/kubernetes/community/blob/master/sig-list.md\n Stackoverflow https://stackoverflow.com/questions/tagged/kubernetes\n Slack\n k8 http://slack.k8s.io/ CNCF https://slack.cncf.io/   "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/primitives/",
	"title": "Primitives",
	"tags": [],
	"description": "",
	"content": " Container Primitives Control Groups Abbreviated cgroups, is a Linux kernel feature that limits, accounts for, and isolates the resource usage\n CPU memory disk I/O network  Namespaces A feature of the Linux kernel that isolate and virtualize system resources of a collection of processes. Examples of resources that can be virtualized include:\n process IDs hostnames user IDs network access interprocess communication filesystems  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/arch/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": " High level Architecture "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/arch/master/",
	"title": "Master",
	"tags": [],
	"description": "",
	"content": " API data store: Etcd (Cluster State)\n Controller Managers :\n Node Controller Deployment Controller ReplicaSet Controller Replication Controller Endpoints Controller Service Account \u0026amp; Token Controller   Scheduler: Bind pod to Node\n  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/arch/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Kubelet:\n cAdvisor (metrics, logs\u0026hellip;)  Container Runtime:\n docker containerd  Pod:\n Container (one or more)  Kube-proxy:\n Used to reach services and allow communication between Nodes.   "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/arch/data/",
	"title": "Data Flow",
	"tags": [],
	"description": "",
	"content": " Data Flow  CNI: Network Plugin in Kubelet that allows to talk to networking to get IPs for Pods and Services.\n gRPC: API to communicate API Server to ETCD, Controller Manager and Scheduler\n Kubelet - all K8s nodes have a kubelet that ensures that any pod assigned to it are running and configured in the desired state.\n CRI(Container Runtime Interface) gRPC API compiled in kubelet which allows to kubelet to talk to container runtimes by using gRPC API.\n The Container Runtime provider has to adapt it to CRI API to allow kubelet to talk to them by using OCI Standard (runc) Initially, Kubernetes was built on top of Docker as the container runtime. Soon after, CoreOS announced the rkt container runtime and wanted Kubernetes to support it, as well. So, Kubernetes ended up supporting Docker and rkt, although this model wasn\u0026rsquo;t very scalable in terms of adding new features or support for new container runtimes.\n CRI consists of a protocol buffers and gRPC API, and libraries,\n  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": " Kubernetes API Objects  Namespaces Pods Resource Quotas Controllers Storage Secrets ConfigMaps Ingress Service Healthchecks  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/namespaces/",
	"title": "Namespaces",
	"tags": [],
	"description": "",
	"content": " Namespaces What Namespaces are virtual clusters inside your Kubernetes cluster that provide logically isolation (kinda) from each other.\nWhy Scope of names Organization of Kubernetes resources\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/pods/",
	"title": "Pods",
	"tags": [],
	"description": "",
	"content": " Pods Pods are a collection of containers that share a namespace, are colocated and scheduled together on Kubenetes nodes.\nA pod is a group of one or more containers, with shared storage/network, and a specification for how to run the containers\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/pods/labels_selectors/",
	"title": "Labels and Selectors",
	"tags": [],
	"description": "",
	"content": " Labels Labels are key/value pairs that are attached to objects, such as pods that help to identify that object.\nSelectors Label Selectors help client/user identify a set of objects.\nspec: selector: matchLabels: app: mysql strategy: type: Recreate template: metadata: labels: app: mysql  Demo Create labels \u0026amp; use selector to identify set of objects\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/resourcequotas/",
	"title": "Resource Quotas",
	"tags": [],
	"description": "",
	"content": " What Requests - How much does this pod need to run\nLimits - This pod only gets this much to run\nWhy Kubernetes being a multi-tenant environment, some applications may hog resources and starve others, Resource Qoatas discourage this behavior\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/resourcequotas/resources/",
	"title": "Resource Quotas",
	"tags": [],
	"description": "",
	"content": " Compute Resources  CPU Memory Storage  requests.storage persistentvolumeclaims storage-class-name.storageclass.storage.k8s.io/requests.storage storage-class-name.storageclass.storage.k8s.io/persistentvolumeclaims  Object Count\n configmaps persistentvolumeclaims pods replicationcontrollers resourcequotas services services.loadbalancers services.nodeports secrets  Priority - low, medium, high\n  More info\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/controllers/",
	"title": "Controllers",
	"tags": [],
	"description": "",
	"content": " Controllers In Kubernetes, a controller is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state. There are several in the Kubernetes Architecture that support different functions in the system.\nNamespace controller - Creates and updates the Namespaces in kubernetes\nServiceaccounts controller - Manages the service accounts in the system, which are for processes to interact with Kubernetes.\nNode Controller - Responsible for noticing and responding when nodes go down. Service Account \u0026amp; Token Controllers: Create default accounts and API access tokens for new namespaces.\nDeployment Controller - A Deployment controller provides declarative updates for Pods and ReplicaSets.\nReplication Controller - Responsible for maintaining the correct number of pods for every replication controller object in the system.\nEndpoints Controller - Populates the Endpoints object (that is, joins Services \u0026amp; Pods). When services are created, the Endpoint controller manages the connection between services and the pods back the service.\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/controllers/updates/",
	"title": "Controllers Updates",
	"tags": [],
	"description": "",
	"content": " Deployments  Scaling Rolling\u000b  ReplicaSet  Desired state  Strategies:  Recreate RollingUpdate (default) Blue/Green Canary A/B Testing  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/",
	"title": "Storage",
	"tags": [],
	"description": "",
	"content": " What Storage like compute is another resource that must be managed. Kubernetes offers 3 types of storage\n Volumes Persistent Volumes Persistent Volume Claims  Why The Ephemeral nature of pods and containers lead to the need for data to be have a decoupled lifecycle outside of containers and pods.\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/volumes/",
	"title": "Volumes",
	"tags": [],
	"description": "",
	"content": "Several volume types are supported\n awsElasticBlockStore azureDisk gcePersistentDisk hostPath secret configmaps  awsElasticBlockStore example yaml:\napiVersion: v1 kind: Pod metadata: name: test-ebs spec: containers: - image: k8s.gcr.io/test-webserver name: test-container volumeMounts: - mountPath: /test-ebs name: test-volume volumes: - name: test-volume # This AWS EBS volume must already exist. awsElasticBlockStore: volumeID: \u0026lt;volume-id\u0026gt; fsType: ext4  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/pv/",
	"title": "Persistent Volume",
	"tags": [],
	"description": "",
	"content": "Persistent Volumes (PV\u0026rsquo;s) are a piece of storage provisioned in a cluster and can be used/reference in the cluster like another other resource.\nProvisioning - Static or Dynamic\nTypes of PV\u0026rsquo;s\n GCEPersistentDisk AWSElasticBlockStore AzureFile CephFS  kind: PersistentVolume apiVersion: v1 metadata: name: task-pv-volume labels: type: local spec: storageClassName: manual capacity: storage: 10Gi accessModes: - ReadWriteOnce hostPath: path: \u0026quot;/mnt/data\u0026quot;  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/pvc/",
	"title": "Persistent Volume Claims",
	"tags": [],
	"description": "",
	"content": "Persistent Volume Claims (PVC\u0026rsquo;s) - Allow pods to requests and attache Persistent Volumes available in the cluster.\nWhen used in with Dynamic provision and Storage Classes, PVC\u0026rsquo;s can automatically make storage available on demand.\nTypes of PVC\u0026rsquo;s\n GCEPersistentDisk AWSElasticBlockStore AzureFile CephFS  kind: Pod apiVersion: v1 metadata: name: mypod spec: containers: - name: myfrontend image: nginx volumeMounts: - mountPath: \u0026quot;/var/www/html\u0026quot; name: mypd volumes: - name: mypd persistentVolumeClaim: claimName: myclaim  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/classes/",
	"title": "Storage Classes",
	"tags": [],
	"description": "",
	"content": "Storage classes allow cluster administrators to provide varing levels of support and types of storage to applications in a cluster\nExample: Storage class that will provision an AWS EBS Volumes when referenced a PVC\nkind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: standard provisioner: kubernetes.io/aws-ebs parameters: type: gp2 reclaimPolicy: Retain mountOptions: - debug volumeBindingMode: Immediate  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/storage/demo/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "   Kubernetes yaml files   mysql-pod.yaml  (0 ko)   mysql-pv.yaml  (0 ko)    Create the persistent and the claim\nkubectl apply -f mysql-pv.yaml  Create a pod that will use it.\nkubectl apply -f mysql-pod.yaml  Clean up kubectl delete -f mysql-pv.yaml kubectl delete -f mysql-pod.yaml  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/secrets/",
	"title": "Secrets",
	"tags": [],
	"description": "",
	"content": " What Kubernetes object to inject sensitive data into containers\nWhy Sensitive data should never be built into the container image, in order to do that, kubernetes offers Secrets.\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/secrets/secret/",
	"title": "Secrets Uses - Secret",
	"tags": [],
	"description": "",
	"content": "echo -n 'admin' | base64 YWRtaW4= echo -n '1f2d1e2e67df' | base64 MWYyZDFlMmU2N2Rm  Write a Secret that looks like this:\napiVersion: v1 kind: Secret metadata: name: mysecret type: Opaque data: username: YWRtaW4= password: MWYyZDFlMmU2N2Rm  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/secrets/file/",
	"title": "Secrets Uses - File",
	"tags": [],
	"description": "",
	"content": "apiVersion: v1 kind: Pod metadata: name: mypod spec: containers: - name: mypod image: redis volumeMounts: - name: foo mountPath: \u0026quot;/etc/foo\u0026quot; readOnly: true volumes: - name: foo secret: secretName: mysecret  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/secrets/env/",
	"title": "Secrets Uses - Env Var",
	"tags": [],
	"description": "",
	"content": "apiVersion: v1 kind: Pod metadata: name: secret-env-pod spec: containers: - name: mycontainer image: redis env: - name: SECRET_USERNAME valueFrom: secretKeyRef: name: mysecret key: username - name: SECRET_PASSWORD valueFrom: secretKeyRef: name: mysecret key: password restartPolicy: Never  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/configmaps/",
	"title": "Configmaps",
	"tags": [],
	"description": "",
	"content": " What In order to keep the immutablity of a docker image, the configuration must live outside the container image, K8 config maps enable this.\nWhy Secrets, env variables, and other environment specific items should not be baked into a container image.\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/configmaps/configmap/",
	"title": "Configmaps",
	"tags": [],
	"description": "",
	"content": "1apiVersion: v1 2data: 3 game.properties: | 4enemies=aliens 5 lives=3 6 enemies.cheat=true 7 enemies.cheat.level=noGoodRotten 8 secret.code.passphrase=UUDDLRLRBABAS 9 secret.code.allowed=true 10 secret.code.lives=30 11 ui.properties: | 12color.good=purple 13 color.bad=yellow 14 allow.textmode=true 15 how.nice.to.look=fairlyNice 16kind: ConfigMap 17metadata: 18 name: game-config 19 namespace: default 20  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/configmaps/volumes/",
	"title": "Configmaps - Volume",
	"tags": [],
	"description": "",
	"content": "1apiVersion: v1 2kind: Pod 3metadata: 4 name: dapi-test-pod 5spec: 6 containers: 7 - name: test-container 8 image: k8s.gcr.io/busybox 9 command: [ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;ls /etc/config/\u0026#34; ] 10 volumeMounts: 11 - name: config-volume 12 mountPath: /etc/config 13 volumes: 14 - name: config-volume 15 configMap: 16 name: special-config 17 restartPolicy: Never "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/configmaps/envvar/",
	"title": "Configmaps - Env Var",
	"tags": [],
	"description": "",
	"content": "1apiVersion: v1 2kind: Pod 3metadata: 4 name: dapi-test-pod 5spec: 6 containers: 7 - name: test-container 8 image: k8s.gcr.io/busybox 9 command: [ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)\u0026#34; ] 10 env: 11 - name: SPECIAL_LEVEL_KEY 12 valueFrom: 13 configMapKeyRef: 14 name: special-config 15 key: SPECIAL_LEVEL 16 - name: SPECIAL_TYPE_KEY 17 valueFrom: 18 configMapKeyRef: 19 name: special-config 20 key: SPECIAL_TYPE 21 restartPolicy: Never "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/ingress/",
	"title": "ingress",
	"tags": [],
	"description": "",
	"content": " What Ingress is a K8 object that allows external access to resources inside the cluster\nWhy Services, Pods and other objects are only accessible inside the cluster\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/ingress/controller/",
	"title": "Ingress Controllers",
	"tags": [],
	"description": "",
	"content": " Ingress controllers In order for the ingress resource to work, the cluster must have an ingress controller running. This is unlike other types of controllers, which run as part of the kube-controller-manager binary, and are typically started automatically with a cluster. Choose the ingress controller implementation that best fits your cluster.\nIngress Controller\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: test-ingress spec: backend: serviceName: testsvc servicePort: 80  Kubernetes supported Ingress Controllers:\n GCE nginx  Others that can be deployed:\n HAProxy Kong Contour  Full list is here\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/ingress/rules/",
	"title": "Ingress Rules",
	"tags": [],
	"description": "",
	"content": "Each http rule contains the following information:\n Host list of paths Backend service  Ingress Rule\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: simple-fanout-example annotations: nginx.ingress.kubernetes.io/rewrite-target: / spec: rules: - host: foo.bar.com http: paths: - path: /foo backend: serviceName: service1 servicePort: 4200 - path: /bar backend: serviceName: service2 servicePort: 8080  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": " What Service: a named abstraction of software service, consisting of a port that the proxy listens on, and the selector that determines which pods will answer requests.\nWhy Pods come and go, and with that their IP address change rapidly. Services decouple the IP address from the application and serve as the IP address inside the cluster for an application running multiple pods.\nMore info here\n "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/services/diag/",
	"title": "Service Diagram",
	"tags": [],
	"description": "",
	"content": "  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/services/demo/",
	"title": "Demo",
	"tags": [],
	"description": "",
	"content": "   Kubernetes yaml files   app.yaml  (1 ko)   mysql-all.yaml  (1 ko)   mysql-service.yaml  (0 ko)    Pod Deployment with health checks, PersistentVolume and claim Since we have created the mysql pod several times, here is a yaml file that creates it all.\nCreate a secret for the password between Wordpress and MYSQL kubectl create secret generic mysql-pass --from-literal=password=YOUR_PASSWORD  Verify it is there\nkubectl get secrets  Deploy mysql\nkubectl apply -f mysql-all.yaml  Verify mysql deployed properly\nkubectl get deploy  Services Deploy the service for mysql\nkubectl apply -f mysql-service.yaml  Verify the service has endpoints.\nkubectl get services -o wide  Application Deployment deploy the application that will use mysqld\nkubectl apply -f app.yaml  Verify Service\nkubectl get services wordpress  Clean up kubectl delete -f mysql-all.yaml kubectl delete -f mysql-service.yaml kubectl delete -f app.yaml  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/healthchecks/",
	"title": "Healthchecks",
	"tags": [],
	"description": "",
	"content": " What Healthchecks inform that kubelet that pods are ready to accept traffic\nWhy The distributed nature of kubernetes allows pods to come and go for a number of reasons, and if many are running a application the kubelet needs to know what a \u0026ldquo;healthy\u0026rdquo; pod looks like.\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/daemonsets/",
	"title": "Daemonsets",
	"tags": [],
	"description": "",
	"content": " Daemonsets What Specialized deployments that will deploy pods on every node in the cluster\nWhy  running a cluster storage daemon, such as glusterd, ceph, on each node. running a logs collection daemon on every node, such as fluentd or logstash. running a node monitoring daemon on every node,  Prometheus Node Exporter collectd Dynatrace OneAgent AppDynamics Agent Datadog agent     "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/healthchecks/liveliness/",
	"title": "Liveliness",
	"tags": [],
	"description": "",
	"content": " Readiness and Liveliness Liveliness Liveliness checks inform the kubelet that the pod is running. If this check fails the kubelet will attempt to restart the pod.\napiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-exec spec: containers: - name: liveness image: k8s.gcr.io/busybox args: - /bin/sh - -c - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600 livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/objects/healthchecks/readiness/",
	"title": "Readiness",
	"tags": [],
	"description": "",
	"content": " Readiness and Liveliness Readiness Readiness checks let the kubelet know that the pod is ready to receive traffic. For example if this check fails the Service or Load balancer does send traffic to that pod.\nreadinessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/docker/",
	"title": "Docker Intro",
	"tags": [],
	"description": "",
	"content": " Docker Benefits Platform Dockerfile Docker cli Docker Exercise "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/micro/",
	"title": "Microservices Exercise",
	"tags": [],
	"description": "",
	"content": "Git clone Exercises\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/docker/benefits/",
	"title": "Benefits of Docker",
	"tags": [],
	"description": "",
	"content": " Docker Benefits  Separation of concerns Developers focus on building their apps System admins focus on deployment Fast development cycle Application portability Build in one environment, ship to another Scalability Easily spin up new containers if needed Run more apps on one host machine  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/docker/platform/",
	"title": "Docker Platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/docker/dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": " Dockerfile  Instructions specify what to do when building the image FROM instruction specifies what the base image should be RUN instruction specifies a command to execute Comments start with “#” Remember, each line in a Dockerfile creates a new layer if it changes the state of the image You need to find the right balance between having lots of layers created for the image and readability of the Dockerfile Don’t install unnecessary packages One ENTRYPOINT per Dockerfile Combine similar commands into one by using “\u0026amp;\u0026amp;” and “\\”\n Use the caching system to your advantage The order of statements is important Add files that are least likely to change first and the ones most likely to change last  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/containers/docker/cli/",
	"title": "CLI",
	"tags": [],
	"description": "",
	"content": " Docker Docker cli  docker ps docker images docker logs docker exec  Official Documentation\nMore exercises\n"
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/running/",
	"title": "Running",
	"tags": [],
	"description": "",
	"content": " Options for Running Kubernetes  GKP EKS AKS On prem  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/",
	"title": "Extras",
	"tags": [],
	"description": "",
	"content": " Logging Monitoring Security  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/monitoring/",
	"title": "Monitoring",
	"tags": [],
	"description": "",
	"content": " cAdvisor\n Prometheus\n Datadog\n  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": " kubectl logs Node level Cluster Level Side Car  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/logging-kc/",
	"title": "Logging - Pod",
	"tags": [],
	"description": "",
	"content": " Logging  kubectl logs  apiVersion: v1 kind: Pod metadata: name: counter spec: containers: - name: count image: busybox args: [/bin/sh, -c, 'i=0; while true; do echo \u0026quot;$i: $(date)\u0026quot;; i=$((i+1)); sleep 1; done']  $ kubectl logs counter 0: Mon Jan 1 00:00:00 UTC 2001 1: Mon Jan 1 00:00:01 UTC 2001 2: Mon Jan 1 00:00:02 UTC 2001  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/logging-node/",
	"title": "Logging - Node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/logging-cluster/",
	"title": "Logging - Cluster",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/security/",
	"title": "Security - Containers",
	"tags": [],
	"description": "",
	"content": " Container security primitives  SElinux AppArmor Seccomp https://docs.docker.com/engine/security/seccomp/#run-without-the-default-seccomp-profile  Container Pipeline  Establish a pipeline to build a standard image Have a versioning policy Allow to only run images based of the standard image Use the same OS as the host Keep the image small Use a private registry Don’t embed secrets into images, use Hashicorp Vault https://www.cisecurity.org/benchmark/docker/ https://github.com/docker/docker-bench-security  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/kubernetes/extras/security1/",
	"title": "Security - K8",
	"tags": [],
	"description": "",
	"content": " K8 Security  RBAC NetworkPolicy TLS Image Scanning Aquasec/Twistlock Integrating with HashiCorp Vault other public cloud secret stores Investigate using a container based OS (CoreOS, Atomic Linux) Harden and tweak Make sure to pass https://github.com/dev-sec/linux-baseline  Vendors to add  Aquasec https://www.aquasec.com/ Twistlock https://www.twistlock.com/ Sysdig Falco https://www.sysdig.org/falco/  "
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://strongjz.github.io/louk8cnc-intro-k8s/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]